
//***************************************************************************
//
//  (c) 1996-1998 by Microsoft Corporation
//
//  WBEMPROV.IDL
//
//  This IDL file defines the interfaces that WBEM providers need in addition
//  to the client interfaces defined in WBEMCLI.IDL
//
//***************************************************************************

import "objidl.idl";
import "oleidl.idl";
import "oaidl.idl";
import "wbemcli.idl";


typedef VARIANT WBEM_VARIANT;
typedef [string] WCHAR* WBEM_WSTR;

[uuid(092df710-7010-11d1-ad90-00c04fd8fdff)]
library WbemProviders_v1
{
    interface IWbemPropertyProvider;
    interface IWbemUnboundObjectSink;
    interface IWbemEventProvider;
    interface IWbemEventProviderQuerySink;
    interface IWbemEventConsumerProvider;

    interface IWbemProviderInitSink;
    interface IWbemProviderInit;    
    /////////////////////////////////////////////////////////////////
    //

    [uuid(cb8555cc-9128-11d1-ad9b-00c04fd8fdff)]
    coclass WbemAdministrativeLocator
    {
        interface IWbemLocator;
    };

    [uuid(cd184336-9128-11d1-ad9b-00c04fd8fdff)]
    coclass WbemAuthenticatedLocator
    {
        interface IWbemLocator;
    };
};

#define OPTIONAL in, unique

[restricted, object, uuid(e246107b-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemUnboundObjectSink : IUnknown
{
    HRESULT IndicateToConsumer(
        [in] IWbemClassObject* pLogicalConsumer,
        [in] long lNumObjects,
        [in, size_is(lNumObjects)] IWbemClassObject** apObjects);
};


/////////////////////////////////////////////////////////////////
//
//

[restricted, object, local, uuid(CE61E841-65BC-11d0-B6BD-00AA003240C7)]

interface IWbemPropertyProvider : IUnknown
{
    HRESULT GetProperty(
        [in] long lFlags,
        [in] BSTR strLocale,
        [in] BSTR strClassMapping,
        [in] BSTR strInstMapping,
        [in] BSTR strPropMapping,
        [out] VARIANT* pvValue
        );
        
    HRESULT PutProperty(
        [in] long lFlags,
        [in] BSTR strLocale,
        [in] BSTR strClassMapping,
        [in] BSTR strInstMapping,
        [in] BSTR strPropMapping,
        [in] VARIANT* pvValue
        );        
};

[restricted, object, uuid(e245105b-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemEventProvider : IUnknown
{
    HRESULT ProvideEvents(
                [in] IWbemObjectSink* pSink,
                [in] long lFlags
            );
};

[restricted, object, uuid(580acaf8-fa1c-11d0-ad72-00c04fd8fdff)]
interface IWbemEventProviderQuerySink : IUnknown
{
    HRESULT NewQuery(
                [in] unsigned long dwId,
                [in] WBEM_WSTR wszQueryLanguage,
                [in] WBEM_WSTR wszQuery
            );
    HRESULT CancelQuery(
                [in] unsigned long dwId);
};


[restricted, object, uuid(e246107a-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemEventConsumerProvider : IUnknown
{
     HRESULT FindConsumer(
                [in] IWbemClassObject* pLogicalConsumer,
                [out] IWbemUnboundObjectSink** ppConsumer);
};

typedef enum tag_WBEM_EXTRA_RETURN_CODES
{
    WBEM_S_INITIALIZED = 0,
    WBEM_S_LIMITED_SERVICE = 0x43001,
    WBEM_S_INDIRECTLY_UPDATED,
    

    WBEM_E_RETRY_LATER = 0x80043001,
    WBEM_E_RESOURCE_CONTENTION,
} WBEM_EXTRA_RETURN_CODES;

typedef enum tag_WBEM_PROVIDER_FLAGS
{
    WBEM_FLAG_OWNER_UPDATE = 0x10000,
} WBEM_PROVIDER_FLAGS;



[object, uuid(1be41571-91dd-11d1-aeb2-00c04fb68820)]

interface IWbemProviderInitSink : IUnknown
{
    HRESULT SetStatus(
        [in] LONG lStatus,
        [in] LONG lFlags 
        );
};



[object, uuid(1be41572-91dd-11d1-aeb2-00c04fb68820)]

interface IWbemProviderInit : IUnknown
{
    HRESULT Initialize(
        [in, unique] LPWSTR wszUser,
        [in] LONG lFlags,
        [in] LPWSTR wszNamespace,
        [in, unique] LPWSTR wszLocale,
        [in] IWbemServices* pNamespace,
        [in] IWbemContext* pCtx,
        [in] IWbemProviderInitSink* pInitSink    
        );
};
